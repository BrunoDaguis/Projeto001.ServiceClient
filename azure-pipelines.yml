variables:
  project_name: 'Project001.ServiceClient.Api'
  project_test_name: 'Project001.ServiceClient.Tests'
  solution_name: 'Project001.ServiceClient'
  netcore_version: '3.1'

jobs:
- job: Build
  steps:
  - script: |
      pwd && ls -la
      dotnet restore
      dotnet publish -c Release -o bin/Release/netcoreapp$(netcore_version)
      mkdir artifact
      cp -r $(project_name)/bin/Release/netcoreapp$(netcore_version) artifact/$(Build.SourceBranchName)
    displayName: Build Application
  - task: PublishPipelineArtifact@1
    displayName: Store Application Artifact
    inputs:
      path: $(System.DefaultWorkingDirectory)/artifact
      artifact: $(project_name)
- job: UnitTests
  dependsOn: Build
  steps:
    - script: |
        dotnet tool install --global coverlet.console
        dotnet add $(project_test_name).Tests/$(project_test_name).Tests.csproj package coverlet.msbuild
        dotnet add $(project_test_name).Tests/$(project_test_name).Tests.csproj package XunitXml.TestLogger
        dotnet test /p:CollectCovergae=true \
                    /p:CoverletOutputFormat=\"opencover,cobertura\" \
                    /p:CoverletOutput=results/result  \
                    /p:Exclude=[xunit.*]* $(solution_name).sln \
                    --test-adapter-path:. --logger:"xunit;LogFilePath=results/result.xunit.xml"
      displayName: Running Unit Test
    - task: PublishPipelineArtifact@1
      displayName: Store Test Result
      inputs:
        path: $(System.DefaultWorkingDirectory)/$(project_test_name).Tests/results
        artifact: UnitTestResults
    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(System.DefaultWorkingDirectory)/$(project_test_name).Tests/results
    - task: PublishTestResults@1
      displayName: Publish Test Result
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/$(project_test_name).Tests/results'
        testRunTitle: 'Collecting Test Results'